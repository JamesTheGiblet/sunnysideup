import os

def create_project_structure(project_name="solar-calculator"):
    """
    Creates the basic file structure for the Praximous Solar Panel Calculator.
    """
    print(f"Creating project structure for '{project_name}'...")

    # Define the base directories
    base_dir = project_name
    backend_dir = os.path.join(base_dir, "backend")
    frontend_dir = os.path.join(base_dir, "frontend")

    # Define backend structure (Django/Flask inspired)
    backend_subdirs = [
        os.path.join(backend_dir, "solar_calculator_api"), # Main Django project/Flask app directory
        os.path.join(backend_dir, "solar_calculator_api", "products"), # App for products
        os.path.join(backend_dir, "solar_calculator_api", "quotes"),   # App for quotes
        os.path.join(backend_dir, "solar_calculator_api", "faqs"),     # App for FAQs
        os.path.join(backend_dir, "core_calculations"), # Separate module for calculation logic
    ]
    backend_files = {
        os.path.join(backend_dir, "requirements.txt"):
            "# Python dependencies for the backend\n"
            "django\n" # or flask
            "djangorestframework\n" # or flask-restful
            "psycopg2-binary\n" # PostgreSQL adapter
            "python-dotenv\n" # For environment variables
            "requests\n" # For external API calls like PVGIS
            "reportlab\n" # For PDF generation
        ,
        os.path.join(backend_dir, ".env.example"):
            "# Example environment variables (copy to .env and fill in)\n"
            "DATABASE_URL=postgresql://user:password@host:port/database_name\n"
            "SECRET_KEY='your_django_secret_key_here'\n"
            "DEBUG=True\n"
            "ALLOWED_HOSTS='localhost,127.0.0.1'\n"
            "GOOGLE_MAPS_API_KEY='your_google_maps_api_key'\n"
            "PVGIS_API_KEY='your_pvgis_api_key'\n"
            "EMAIL_HOST='smtp.your-email-provider.com'\n"
            "EMAIL_PORT=587\n"
            "EMAIL_USE_TLS=True\n"
            "EMAIL_HOST_USER='your_email_username'\n"
            "EMAIL_HOST_PASSWORD='your_email_password'\n"
            "DEFAULT_FROM_EMAIL='no-reply@praximous.com'\n"
        ,
        os.path.join(backend_dir, "manage.py"):
            "# Placeholder for Django's manage.py or Flask's run script\n"
            "# This file would typically be generated by Django or Flask CLI."
        ,
        os.path.join(backend_dir, "solar_calculator_api", "__init__.py"): "",
        os.path.join(backend_dir, "solar_calculator_api", "settings.py"):
            "# Django settings or Flask config\n"
            "# Database configuration, installed apps, API keys etc.\n"
            "# This file would contain the main configuration for your backend application."
        ,
        os.path.join(backend_dir, "solar_calculator_api", "urls.py"):
            "# Main URL routing for the API\n"
            "# Include URLs from different apps (products, quotes, faqs)."
        ,
        os.path.join(backend_dir, "solar_calculator_api", "wsgi.py"):
            "# WSGI config for deployment"
        ,
        os.path.join(backend_dir, "solar_calculator_api", "products", "__init__.py"): "",
        os.path.join(backend_dir, "solar_calculator_api", "products", "models.py"):
            "# Product database models (SolarPanel, Inverter, MountingHardware)\n"
            "# Define fields like wattage, dimensions, cost etc."
        ,
        os.path.join(backend_dir, "solar_calculator_api", "products", "views.py"):
            "# API views for products (list, detail)\n"
            "# Handle requests for product data."
        ,
        os.path.join(backend_dir, "solar_calculator_api", "products", "urls.py"):
            "# URL routing for product-related APIs"
        ,
        os.path.join(backend_dir, "solar_calculator_api", "quotes", "__init__.py"): "",
        os.path.join(backend_dir, "solar_calculator_api", "quotes", "models.py"):
            "# Quote database models (Quote, Customer)\n"
            "# Store customer info, calculated results, and quote status."
        ,
        os.path.join(backend_dir, "solar_calculator_api", "quotes", "views.py"):
            "# API views for quotes (create, retrieve, send)\n"
            "# Handle quote generation, storage, PDF creation, and email sending."
        ,
        os.path.join(backend_dir, "solar_calculator_api", "quotes", "urls.py"):
            "# URL routing for quote-related APIs"
        ,
        os.path.join(backend_dir, "solar_calculator_api", "faqs", "__init__.py"): "",
        os.path.join(backend_dir, "solar_calculator_api", "faqs", "models.py"):
            "# FAQ database model (Question, Answer, Category, Keywords)\n"
            "# Define fields for storing FAQ content."
        ,
        os.path.join(backend_dir, "solar_calculator_api", "faqs", "views.py"):
            "# API views for FAQs (list, search)\n"
            "# Handle requests for FAQ content."
        ,
        os.path.join(backend_dir, "solar_calculator_api", "faqs", "urls.py"):
            "# URL routing for FAQ-related APIs"
        ,
        os.path.join(backend_dir, "core_calculations", "__init__.py"): "",
        os.path.join(backend_dir, "core_calculations", "solar_logic.py"):
            "# Contains core calculation functions:\n"
            "# - usable_roof_area_calculator\n"
            "# - panel_layout_optimizer\n"
            "# - system_size_calculator\n"
            "# - annual_generation_estimator\n"
            "# - cost_estimator\n"
            "# - savings_calculator\n"
            "# - payback_period_calculator"
        ,
        os.path.join(backend_dir, "core_calculations", "pdf_generator.py"):
            "# Module for generating the PDF quote document.\n"
            "# Uses ReportLab or similar library."
        ,
        os.path.join(backend_dir, "core_calculations", "email_sender.py"):
            "# Module for sending emails (integrates with SendGrid/Mailgun/AWS SES).\n"
            "# Handles sending the quote PDF to client and seller."
        ,
        os.path.join(backend_dir, ".gitignore"):
            "*.pyc\n"
            "__pycache__/\n"
            "venv/\n"
            ".env\n"
            "db.sqlite3\n" # If using SQLite initially
            "media/\n"
        ,
    }

    # Define frontend structure (React inspired)
    frontend_subdirs = [
        os.path.join(frontend_dir, "public"),
        os.path.join(frontend_dir, "src"),
        os.path.join(frontend_dir, "src", "components"), # Reusable UI components
        os.path.join(frontend_dir, "src", "pages"),      # Main application views/pages
        os.path.join(frontend_dir, "src", "services"),   # API interaction logic
        os.path.join(frontend_dir, "src", "utils"),      # Utility functions
    ]
    frontend_files = {
        os.path.join(frontend_dir, "public", "index.html"):
            "<!DOCTYPE html>\n"
            "<html lang=\"en\">\n"
            "<head>\n"
            "    <meta charset=\"UTF-8\">\n"
            "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
            "    <title>SunnySideUp by Praximous</title>\n"
            "</head>\n"
            "<body>\n"
            "    <div id=\"root\"></div>\n"
            "    <script src=\"../src/index.js\"></script>\n"
            "</body>\n"
            "</html>"
        ,
        os.path.join(frontend_dir, "src", "index.js"):
            "import React from 'react';\n"
            "import ReactDOM from 'react-dom/client';\n"
            "import App from './App';\n"
            "import './index.css'; // For Tailwind CSS or global styles\n\n"
            "const root = ReactDOM.createRoot(document.getElementById('root'));\n"
            "root.render(\n"
            "  <React.StrictMode>\n"
            "    <App />\n"
            "  </React.StrictMode>\n"
            ");"
        ,
        os.path.join(frontend_dir, "src", "App.js"):
            "import React from 'react';\n"
            "import CalculatorPage from './pages/CalculatorPage';\n\n"
            "function App() {\n"
            "  return (\n"
            "    <div className=\"App\">\n"
            "      <CalculatorPage />\n"
            "    </div>\n"
            "  );\n"
            "}\n\n"
            "export default App;"
        ,
        os.path.join(frontend_dir, "src", "index.css"):
            "/* Add Tailwind CSS imports here if using CDN or build process */\n"
            "/* @tailwind base;\n"
            "@tailwind components;\n"
            "@tailwind utilities; */\n\n"
            "/* Basic global styles */\n"
            "body {\n"
            "  font-family: 'Inter', sans-serif;\n"
            "  margin: 0;\n"
            "  padding: 0;\n"
            "  background-color: #f4f7f6;\n"
            "}"
        ,
        os.path.join(frontend_dir, "src", "pages", "CalculatorPage.js"):
            "import React from 'react';\n"
            "import InputForm from '../components/InputForm';\n"
            "import ResultsDisplay from '../components/ResultsDisplay';\n"
            "import FAQModal from '../components/FAQModal';\n"
            "import QuotePreview from '../components/QuotePreview';\n\n"
            "function CalculatorPage() {\n"
            "  // State management for calculator inputs and results\n"
            "  const [showFAQ, setShowFAQ] = React.useState(false);\n"
            "  const [showPreview, setShowPreview] = React.useState(false);\n\n"
            "  return (\n"
            "    <div className=\"container mx-auto p-4\">\n"
            "      <h1 className=\"text-4xl font-bold text-center my-8\">Solar Panel Calculator</h1>\n"
            "      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n"
            "        <InputForm />\n"
            "        <ResultsDisplay />\n"
            "      </div>\n"
            "      <div className=\"flex justify-center mt-8 space-x-4\">\n"
            "        <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n"
            "                onClick={() => setShowFAQ(true)}>\n"
            "          Open FAQ\n"
            "        </button>\n"
            "        <button className=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\"\n"
            "                onClick={() => setShowPreview(true)}>\n"
            "          Preview Quote\n"
            "        </button>\n"
            "        <button className=\"bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded\">\n"
            "          Send Quote\n"
            "        </button>\n"
            "      </div>\n"
            "      {showFAQ && <FAQModal onClose={() => setShowFAQ(false)} />}\n"
            "      {showPreview && <QuotePreview onClose={() => setShowPreview(false)} />}\n"
            "    </div>\n"
            "  );\n"
            "}\n\n"
            "export default CalculatorPage;"
        ,
        os.path.join(frontend_dir, "src", "components", "InputForm.js"):
            "import React from 'react';\n"
            "// This component will contain all input fields for roof dimensions, customer info etc.\n"
            "// It will also feature the '?' interactive hints.\n"
            "function InputForm() {\n"
            "  return (\n"
            "    <div className=\"bg-white p-6 rounded-lg shadow-md\">\n"
            "      <h2 className=\"text-2xl font-semibold mb-4\">Input Details</h2>\n"
            "      {/* Example Input Field */}\n"
            "      <div className=\"mb-4\">\n"
            "        <label htmlFor=\"roofLength\" className=\"block text-gray-700 text-sm font-bold mb-2\">\n"
            "          Roof Length (meters)\n"
            "          <span className=\"ml-2 text-gray-500 cursor-help\" title=\"Enter the usable length of your roof section.\">?</span>\n"
            "        </label>\n"
            "        <input type=\"number\" id=\"roofLength\" className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" placeholder=\"e.g., 10\" />\n"
            "      </div>\n"
            "      {/* More input fields will go here */}\n"
            "    </div>\n"
            "  );\n"
            "}\n"
            "export default InputForm;"
        ,
        os.path.join(frontend_dir, "src", "components", "ResultsDisplay.js"):
            "import React from 'react';\n"
            "// This component will display all calculated results and the 2D panel layout.\n"
            "function ResultsDisplay() {\n"
            "  return (\n"
            "    <div className=\"bg-white p-6 rounded-lg shadow-md\">\n"
            "      <h2 className=\"text-2xl font-semibold mb-4\">Calculated Results</h2>\n"
            "      {/* Example Result Display */}\n"
            "      <p className=\"text-gray-700 mb-2\">Estimated Panels Fit: <span className=\"font-bold\">16</span></p>\n"
            "      <p className=\"text-gray-700 mb-2\">Estimated Cost: <span className=\"font-bold\">£12,500</span></p>\n"
            "      {/* Placeholder for 2D layout */}\n"
            "      <div className=\"bg-gray-100 h-48 w-full rounded-md flex items-center justify-center text-gray-500\">\n"
            "        [2D Panel Layout Visualization Here]\n"
            "      </div>\n"
            "    </div>\n"
            "  );\n"
            "}\n"
            "export default ResultsDisplay;"
        ,
        os.path.join(frontend_dir, "src", "components", "FAQModal.js"):
            "import React from 'react';\n"
            "// This component will display the FAQ search and expandable answers.\n"
            "function FAQModal({ onClose }) {\n"
            "  const faqs = [\n"
            "    { id: 1, question: 'How long do solar panels last?', answer: 'Most solar panels come with a 25-year performance warranty, but can last 30+ years.', category: 'Technical' },\n"
            "    { id: 2, question: 'What is the Smart Export Guarantee (SEG)?', answer: 'The SEG is a UK government scheme that pays you for excess electricity exported to the grid.', category: 'Financial' },\n"
            "    // More FAQs will be fetched from backend\n"
            "  ];\n"
            "  const [searchTerm, setSearchTerm] = React.useState('');\n"
            "  const [activeFAQ, setActiveFAQ] = React.useState(null);\n\n"
            "  const filteredFaqs = faqs.filter(faq => \n"
            "    faq.question.toLowerCase().includes(searchTerm.toLowerCase()) ||\n"
            "    faq.answer.toLowerCase().includes(searchTerm.toLowerCase())\n"
            "  );\n\n"
            "  return (\n"
            "    <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50\">\n"
            "      <div className=\"bg-white p-6 rounded-lg shadow-lg w-11/12 md:w-3/4 lg:w-1/2 max-h-[80vh] overflow-y-auto\">\n"
            "        <div className=\"flex justify-between items-center mb-4\">\n"
            "          <h2 className=\"text-2xl font-semibold\">Frequently Asked Questions</h2>\n"
            "          <button onClick={onClose} className=\"text-gray-500 hover:text-gray-700 text-3xl\">&times;</button>\n"
            "        </div>\n"
            "        <input \n"
            "          type=\"text\" \n"
            "          placeholder=\"Search FAQs...\" \n"
            "          className=\"w-full p-2 border rounded mb-4\"\n"
            "          value={searchTerm}\n"
            "          onChange={(e) => setSearchTerm(e.target.value)}\n"
            "        />\n"
            "        <div>\n"
            "          {filteredFaqs.length > 0 ? (\n"
            "            filteredFaqs.map(faq => (\n"
            "              <div key={faq.id} className=\"border-b py-2\">\n"
            "                <button \n"
            "                  className=\"w-full text-left font-medium text-lg flex justify-between items-center\"\n"
            "                  onClick={() => setActiveFAQ(activeFAQ === faq.id ? null : faq.id)}\n"
            "                >\n"
            "                  {faq.question}\n"
            "                  <span>{activeFAQ === faq.id ? '-' : '+'}</span>\n"
            "                </button>\n"
            "                {activeFAQ === faq.id && (\n"
            "                  <p className=\"mt-2 text-gray-700\">{faq.answer}</p>\n"
            "                )}\n"
            "              </div>\n"
            "            ))\n"
            "          ) : (\n"
            "            <p className=\"text-gray-500\">No FAQs found for your search.</p>\n"
            "          )}\n"
            "        </div>\n"
            "      </div>\n"
            "    </div>\n"
            "  );\n"
            "}\n"
            "export default FAQModal;"
        ,
        os.path.join(frontend_dir, "src", "components", "QuotePreview.js"):
            "import React from 'react';\n"
            "// This component will display a print-friendly preview of the quote.\n"
            "function QuotePreview({ onClose }) {\n"
            "  // In a real app, this would fetch the HTML/PDF preview from the backend\n"
            "  // or render a client-side representation of the quote.\n"
            "  return (\n"
            "    <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50\">\n"
            "      <div className=\"bg-white p-6 rounded-lg shadow-lg w-11/12 md:w-3/4 lg:w-2/3 max-h-[90vh] overflow-y-auto\">\n"
            "        <div className=\"flex justify-between items-center mb-4\">\n"
            "          <h2 className=\"text-2xl font-semibold\">Quote Preview</h2>\n"
            "          <button onClick={onClose} className=\"text-gray-500 hover:text-gray-700 text-3xl\">&times;</button>\n"
            "        </div>\n"
            "        {/* This iframe would load the PDF or HTML preview from the backend */}\n"
            "        <iframe \n"
            "          src=\"https://placehold.co/600x400/E0E0E0/333333?text=Your+Quote+Preview+Here\"\n"
            "          title=\"Quote Preview\"\n"
            "          className=\"w-full h-[60vh] border rounded\"\n"
            "        ></iframe>\n"
            "        <p className=\"mt-4 text-center text-gray-600\">This is a placeholder for your detailed quote preview.</p>\n"
            "      </div>\n"
            "    </div>\n"
            "  );\n"
            "}\n"
            "export default QuotePreview;"
        ,
        os.path.join(frontend_dir, "src", "services", "api.js"):
            "// Centralized place for API calls\n"
            "const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\n"
            "export const getProducts = async () => {\n"
            "  const response = await fetch(`${API_BASE_URL}/products/`);\n"
            "  return response.json();\n"
            "};\n\n"
            "export const getFAQs = async (search = '') => {\n"
            "  const response = await fetch(`${API_BASE_URL}/faqs/?search=${search}`);\n"
            "  return response.json();\n"
            "};\n\n"
            "export const sendQuote = async (quoteData) => {\n"
            "  const response = await fetch(`${API_BASE_URL}/quotes/send/`, {\n"
            "    method: 'POST',\n"
            "    headers: { 'Content-Type': 'application/json' },\n"
            "    body: JSON.stringify(quoteData),\n"
            "  });\n"
            "  return response.json();\n"
            "};\n"
        ,
        os.path.join(frontend_dir, "src", "utils", "helpers.js"):
            "// Utility functions (e.g., unit conversions, data formatting)\n"
            "export const formatCurrency = (amount) => {\n"
            "  return new Intl.NumberFormat('en-GB', { style: 'currency', currency: 'GBP' }).format(amount);\n"
            "};\n"
        ,
        os.path.join(frontend_dir, "package.json"):
            "{\n"
            "  \"name\": \"frontend\",\n"
            "  \"version\": \"0.1.0\",\n"
            "  \"private\": true,\n"
            "  \"dependencies\": {\n"
            "    \"react\": \"^18.2.0\",\n"
            "    \"react-dom\": \"^18.2.0\",\n"
            "    \"react-scripts\": \"5.0.1\"\n"
            "  },\n"
            "  \"scripts\": {\n"
            "    \"start\": \"react-scripts start\",\n"
            "    \"build\": \"react-scripts build\",\n"
            "    \"test\": \"react-scripts test\",\n"
            "    \"eject\": \"react-scripts eject\"\n"
            "  },\n"
            "  \"eslintConfig\": {\n"
            "    \"extends\": [\"react-app\", \"react-app/jest\"]\n"
            "  },\n"
            "  \"browserslist\": {\n"
            "    \"production\": [\n"
            "      \">0.2%\",\n"
            "      \"not dead\",\n"
            "      \"not op_mini all\"\n"
            "    ],\n"
            "    \"development\": [\n"
            "      \"last 1 chrome version\",\n"
            "      \"last 1 firefox version\",\n"
            "      \"last 1 safari version\"\n"
            "    ]\n"
            "  },\n"
            "  \"devDependencies\": {\n"
            "    \"tailwindcss\": \"^3.4.4\"\n"
            "  }\n"
            "}"
        ,
        os.path.join(frontend_dir, "tailwind.config.js"):
            "/** @type {import('tailwindcss').Config} */\n"
            "module.exports = {\n"
            "  content: [\n"
            "    \"./src/**/*.{js,jsx,ts,tsx}\",\n"
            "    \"./public/index.html\",\n"
            "  ],\n"
            "  theme: {\n"
            "    extend: {\n"
            "      fontFamily: {\n"
            "        inter: ['Inter', 'sans-serif'],\n"
            "      },\n"
            "    },\n"
            "  },\n"
            "  plugins: [],\n"
            "}"
        ,
        os.path.join(frontend_dir, "postcss.config.js"):
            "module.exports = {\n"
            "  plugins: {\n"
            "    tailwindcss: {},\n"
            "    autoprefixer: {},\n"
            "  },\n"
            "};\n"
        ,
        os.path.join(frontend_dir, ".env.example"):
            "# Example environment variables (copy to .env and fill in)\n"
            "REACT_APP_API_URL=http://localhost:8000/api\n"
        ,
        os.path.join(frontend_dir, ".gitignore"):
            "node_modules/\n"
            "build/\n"
            ".env\n"
            "npm-debug.log*\n"
            "yarn-debug.log*\n"
            "package-lock.json\n"
            "yarn.lock\n"
        ,
    }

    # Create base directory
    os.makedirs(base_dir, exist_ok=True)
    print(f"Created directory: {base_dir}")

    # Create backend directories
    for path in backend_subdirs:
        os.makedirs(path, exist_ok=True)
        print(f"Created directory: {path}")

    # Create backend files
    for file_path, content in backend_files.items():
        with open(file_path, "w") as f:
            f.write(content)
        print(f"Created file: {file_path}")

    # Create frontend directories
    for path in frontend_subdirs:
        os.makedirs(path, exist_ok=True)
        print(f"Created directory: {path}")

    # Create frontend files
    for file_path, content in frontend_files.items():
        with open(file_path, "w") as f:
            f.write(content)
        print(f"Created file: {file_path}")

    print("\nProject structure created successfully!")
    print(f"Next steps:\n"
          f"1. Navigate to '{base_dir}/backend' and set up your Python virtual environment and install dependencies (`pip install -r requirements.txt`).\n"
          f"2. Configure your '.env' file in the backend directory with actual database and API credentials.\n"
          f"3. Run Django/Flask migrations and start the backend server.\n"
          f"4. Navigate to '{base_dir}/frontend' and install Node.js dependencies (`npm install`).\n"
          f"5. Configure your '.env' file in the frontend directory to point to your backend API.\n"
          f"6. Start the frontend development server (`npm start`).\n"
          f"7. Remember to install Tailwind CSS (if not using CDN) by running `npm install -D tailwindcss postcss autoprefixer` in the frontend directory and then initializing it `npx tailwindcss init -p`."
         )

if __name__ == "__main__":
    create_project_structure()